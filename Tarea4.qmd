# Tarea 4

::: {#exr-1}

Sea $W(t)$ un movimiento Browniano estándar en $[0,T]$. Pruebe que para cualquier $c>0$ fijo, 
$$
V(t) = \dfrac{1}{c} W(c^2 t)
$$

es un movimiento Browniano sobre $[0,T]$. 
:::

:::{.proof}
\
Veamos que $V$ cumple las propiedades del movimiento Browniano.\ 
\
Propiedad C1 (Que comience en 0).\
Se tiene que, $V(0) = \dfrac{1}{c} W (c^2\cdot0)=0$.\
\
Propiedad C2 (Incrementos Independientes).\
Sean $s<t<u<v$, por definición de $V$, se tiene que,
$$
E[\left(V(t)-V(s)\right)\left(V(v)-V(u)\right)]=\dfrac{1}{c^2}E[\left(W(c^2 t)-W(c^2 s)\right)\left(W(c^2 v)-W(c^2 u)\right)]
$$ 

Dado que $W$ tiene incrementos independientes, se cumple que,

\begin{eqnarray}
\dfrac{1}{c^{2}}E\left[\left(W(c^{2}t)-W(c^{2}s)\right)\left(W(c^{2}v)-W(c^{2}u)\right)\right] & = &\dfrac{1}{c^{2}}E\left[\left(W(c^{2}t)-W(c^{2}s)\right)\right]E\left[\left(W(c^{2}v)-W(c^{2}u)\right)\right]
\end{eqnarray}


Entonces $V$ tiene incrementos independientes.\
\
Propiedad C3 (Incrementos estacionarios).\
Sea $s<t$. 
$$
V(t)-V(s)=\dfrac{1}{c}\left[W(c^2 t) - W(c^2 s)\right]
$$

Por las propiedades de la definicion del movimiento Browniano.


\begin{eqnarray}
E\left[V(t)-V(s)\right] & = & \dfrac{1}{c}E\left[W(c^{2}t)-W(c^{2}s)\right]=0\\
\text{Var}\left[V(t)-V(s)\right] & = & \dfrac{1}{c^{2}}\text{Var}\left[W(c^{2}t)-W(c^{2}s)\right]=\dfrac{1}{c^{2}}\left(c^{2}\left(t-s\right)\right)=t-s
\end{eqnarray}


Entonces $V$ tiene incrementos estacionarios. 

Con todo lo anterior se concluye que, $V$ es un movimiento browniano.
:::

::: {#exr-2}
Hacer un script para ilustrar la propiedad de escalado del movimiento Browniano para el caso de $c = \dfrac{1}{5}$. Estar seguro que usa el mismo camino browniano discretizado en cada subplot.
:::

```{.python filename="Browniano escalado, con c=1/5.py"}
import numpy as np
import matplotlib.pyplot as plt
prng = np.random.RandomState(123456789)
T = 1  
n= 100  
dt = 1 / (n - 1)
dw = np.sqrt(dt) * prng.standard_normal(n - 1) 
w = np.concatenate(([0],dw.cumsum()))

time = np.linspace(0,T, n)
c = 0.2  # 1/5
c_time = c**2 * time  
c_w = c**(-1) * w  

fig, browniano_escalado = plt.subplots(2)
browniano_escalado[0].plot(time, w)
browniano_escalado[1].plot(c_time, c_w)
browniano_escalado[0].set_title('Movimiento browniano')
browniano_escalado[1].set_title('Moviemiento browniano escalado')
plt.show()

```
![Figura 1](Figure_T4-1.png)


::: {#exr-3}

Modifique el script `half_brownian_refinement.py` encapsulando el código en una función. Esta función deberá recibir el extremo derecho del intervalo $[0, T]$ y el número de incrementos $N$ de un camino browniano base. El propósito es calcular los incrementos de relleno de una refinamiento con $2N$ incrementos. 
:::

```{.python filename="Browniano refinado, con refinamiento 2N.py"}
import numpy as np
import matplotlib.pyplot as plt
prng = np.random.RandomState(123456789)

def refined_brownian_2n(T,L):
    dt = T / L
    W = np.zeros(L + 1)
    W_refined = np.zeros(2 * L + 1)
    xi = np.sqrt(dt) * prng.normal(size=L)
    xi_half = np.sqrt(0.5 * dt) * prng.normal(size=L)
    W[1:] = xi.cumsum()
    W_ = np.roll(W, -1)
    W_half = 0.5 * (W + W_)
    W_half = np.delete(W_half, -1) + xi_half
    W_refined[1::2] = W_half
    W_refined[2::2] = W[1:]
    t = np.arange(0, T + dt, dt)
    t_half = np.arange(0, T + 0.5 * dt, 0.5 * dt)
    return t,t_half,W, W_refined

```

::: {#exr-4}

En un script separado, incluya la función de arriba y grafique una figura con la trayectoria del browniano con 100 incrementos y muestre su refinamiento correspondiente.
:::

````{.python filename="Browniano refinado, con refinamiento 2N y 100 incrementos.py"}
import numpy as np
import matplotlib.pyplot as plt
import h_b_r as hbr

a, b, c, d = hbr.refined_brownian_2n(1, 100)

plt.plot(a, c, 'r-+')
plt.plot(
    b,
    d,
    'g*--',
    # alpha = transparecia
    )
plt.show()
````
![Figura 2](Figure_2_T4.png)